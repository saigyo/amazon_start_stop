#!/usr/bin/env ruby

require 'fog'
require 'tzinfo'

START_HOUR = ENV['START_HOUR'].to_i
STOP_HOUR  = ENV['STOP_HOUR'].to_i

conn = Fog::Compute::AWS.new(aws_access_key_id:     ENV['AWS_ACCESS_KEY_ID'],
                             aws_secret_access_key: ENV['AWS_SECRET_ACCESS_KEY'],
                             region:                ENV['EC2_REGION'])

server = conn.servers.get(ENV['AWS_INSTANCE_ID'])

if server.nil?
  puts "No server found for instance id #{ENV['AWS_INSTANCE_ID']}"
  exit
end

puts "amazon_start_stop server #{server.id}"

tz = TZInfo::Timezone.get('Etc/UTC')

# To get all zone identifiers by Country i.e. US, BR etc.
# TZInfo::Country.get('BR').zone_identifiers.inspect

now = tz.now

puts "now #{now}"
puts "now hour #{now.hour}"
puts "start hour #{START_HOUR}"
puts "stop hour #{STOP_HOUR}"

running_range = if START_HOUR > STOP_HOUR
                  now.hour < STOP_HOUR || now.hour >= START_HOUR
                else 
                  now.hour >= START_HOUR && now.hour < STOP_HOUR
                end

stopped_range = !running_range

puts "server status: #{server.state}"
puts "in stopped range: #{stopped_range}"

if stopped_range && server.state != 'stopped'
  puts "stopping server #{server.id}"

  server.stop
  # server.wait_for { state == 'stopped' }
end

if running_range && server.state != 'running'
  puts "starting server #{server.id}"

  server.start

  elastic_ip = ENV['AWS_ELASTIC_IP']

  if !elastic_ip.nil? && !elastic_ip.empty?
    server.wait_for { state == 'running' }
    puts "associating #{elastic_ip} to #{server.id}"
    conn.associate_address server.id, elastic_ip
    # conn.associate_address server.id, 127.0.0.0
  end
end

puts "done #{server.id}"

